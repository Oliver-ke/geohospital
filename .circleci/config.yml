version: '2.1'
orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-eks: circleci/aws-eks@2.1.1
  kubernetes: circleci/kubernetes@1.3

commands:
  install-yd:
    description: "add yd to current job"
    steps:
      - run:
          name: "get package yd"
          command: |
            sudo wget https://github.com/mikefarah/yq/releases/download/v4.19.1/yq_linux_amd64 -O /usr/bin/yq &&\
            sudo chmod +x /usr/bin/yq

jobs:
  build-frontend:
    docker:
      - image: cimg/node:14.17.3
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:14.17.3
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  ## lint backend
  
  test-frontend:
    docker:
      - image: cimg/node:14.17.3
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Test
          command: |
            cd frontend
            npm install
            npm run test

  scan-backend:
    docker:
      - image: cimg/node:14.17.3
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Analyse code
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  ## create node using eksctl set lable
  create-nodegroup:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - checkout
      - install-yd
      - run:
          name: "install eksctl"
          command: |
            curl --silent --location \
            "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | \
            tar xz -C /tmp 
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: "update config with variables"
          command: |
            NAME=node-${CIRCLE_WORKFLOW_ID:0:7}
            WFLOW=${CIRCLE_WORKFLOW_ID:0:7}
            WFLOW=$WFLOW yq eval -i '.managedNodeGroups[0].labels.workflow = strenv(WFLOW)' \
            ./deployment/cf-templates/eks-node.yml
            NAME=$NAME yq eval -i '.managedNodeGroups[0].name = strenv(NAME)' \
            ./deployment/cf-templates/eks-node.yml
            cat ./deployment/cf-templates/eks-node.yml
      - run:
          name: "create nodegroup with eskctl"
          command: |
            eksctl create nodegroup -f deployment/cf-templates/eks-node.yml
        
      
  ## create a deployment on new node
  deploy-to-cluster:
    docker:
      - image: 'cimg/python:3.10'
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: geohospital
      - install-yd
      - run:
          name: create deployment & service to select new node
          command: |
            WFLOW=${CIRCLE_WORKFLOW_ID:0:7}
            IMAGE=681986958382.dkr.ecr.us-east-1.amazonaws.com/geohospital:${WFLOW}
            DP_NAME=deployment-${WFLOW}
            APP=geohospital-${WFLOW}
            SVR_NAME=service-${WFLOW}
            WFLOW=$WFLOW yq eval -i '.spec.template.spec.nodeSelector.workflow = strenv(WFLOW)' \
            ./deployment/deployment.yml
            IMAGE=$IMAGE yq eval -i '.spec.template.spec.containers[0].image = strenv(IMAGE)' \
            ./deployment/deployment.yml
            NAME=$DP_NAME yq eval -i '.metadata.name = strenv(NAME)' \
            ./deployment/deployment.yml
            APP=$APP yq eval -i '.metadata.labels.app = strenv(APP)' \
            ./deployment/deployment.yml
            APP=$APP yq eval -i '.spec.selector.matchLabels.app = strenv(APP)' \
            ./deployment/deployment.yml
            APP=$APP yq eval -i '.spec.template.metadata.labels.app = strenv(APP)' \
            ./deployment/deployment.yml
            SVR=$SVR_NAME yq eval -i '.metadata.name = strenv(SVR)' \
            ./deployment/loadbalancer.yml
            APP=$APP yq eval -i '.spec.selector.app = strenv(APP)' \
            ./deployment/loadbalancer.yml
            cat ./deployment/deployment.yml
            cat ./deployment/loadbalancer.yml  
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ./deployment/deployment.yml
          resource-name: deployment/deployment-${CIRCLE_WORKFLOW_ID:0:7}
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: ./deployment/loadbalancer.yml
          resource-name: service/service-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: show resource
          command: |
            kubectl get deployments
            kubectl get services
          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - create-nodegroup:
          requires: 
            - scan-backend
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          no-output-timeout: 20m
          region: AWS_DEFAULT_REGION
          repo: geohospital
          skip-when-tags-exist: false
          tag:  ${CIRCLE_WORKFLOW_ID:0:7}
          requires:
            - build-backend
      - deploy-to-cluster:
          requires:
            - aws-ecr/build-and-push-image
